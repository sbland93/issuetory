{"version":3,"sources":["../../../server/auth/auth.service.js"],"names":[],"mappings":"AAAA;;;;;;;;;;QAmBgB,e,GAAA,e;QA4BA,e,GAAA,e;QASA,O,GAAA,O;QAoBA,S,GAAA,S;QASA,c,GAAA,c;;AAnFhB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,cAAc,0BAAW;AAC3B,UAAQ,sBAAO,OAAP,CAAe;AADI,CAAX,CAAlB;;;;;;AAUO,SAAS,eAAT,GAA2B;AAChC,SAAO;;AAAA,GAEJ,GAFI,CAEA,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AAC5B,YAAQ,GAAR,CAAY,qCAAZ,EAAmD,yBAAe,IAAI,OAAJ,CAAY,aAA3B,CAAnD;;AAEA,QAAI,IAAI,KAAJ,IAAa,IAAI,KAAJ,CAAU,cAAV,CAAyB,cAAzB,CAAjB,EAA2D;AACzD,UAAI,OAAJ,CAAY,aAAZ,GAA4B,YAAY,IAAI,KAAJ,CAAU,YAAlD;AACD;AACD,gBAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB;AACD,GATI;;AAAA,GAWJ,GAXI,CAWA,UAAS,GAAT,EAAc,GAAd,EAAmB,IAAnB,EAAyB;AAC5B,mBAAK,QAAL,CAAc,IAAI,IAAJ,CAAS,GAAvB,EAA4B,IAA5B,GACG,IADH,CACQ,gBAAQ;AACZ,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAP;AACD;AACD,UAAI,IAAJ,GAAW,IAAX;AACA;AACD,KAPH,EAQG,KARH,CAQS;AAAA,aAAO,KAAK,GAAL,CAAP;AAAA,KART;AASD,GArBI,CAAP;AAsBD;;AAKM,SAAS,eAAT,GAA0B;AAC/B,MAAG,CAAC,IAAI,IAAJ,CAAS,UAAb,EAAyB,OAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAP;AACzB;AACD;;;;;AAMM,SAAS,OAAT,CAAiB,YAAjB,EAA+B;AACpC,MAAI,CAAC,YAAL,EAAmB;AACjB,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,SAAO,sCACJ,GADI,CACA,iBADA,EAEJ,GAFI,CAEA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C;AAC9C,QAAI,sBAAO,SAAP,CAAiB,OAAjB,CAAyB,IAAI,IAAJ,CAAS,IAAlC,KACA,sBAAO,SAAP,CAAiB,OAAjB,CAAyB,YAAzB,CADJ,EAC4C;AAC1C;AACD,KAHD,MAGO;AACL,UAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,WAArB;AACD;AACF,GATI,CAAP;AAUD;;;;;AAKM,SAAS,SAAT,CAAmB,EAAnB,EAAuB,IAAvB,EAA6B;AAClC,SAAO,uBAAI,IAAJ,CAAS,EAAE,KAAK,EAAP,EAAW,MAAM,IAAjB,EAAT,EAAkC,sBAAO,OAAP,CAAe,OAAjD,EAA0D;AAC/D,eAAW,KAAK,EAAL,GAAU;AAD0C,GAA1D,CAAP;AAGD;;;;;AAKM,SAAS,cAAT,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC;AACvC,MAAI,CAAC,IAAI,IAAT,EAAe;AACb,WAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,wDAArB,CAAP;AACD;AACD,MAAI,QAAQ,UAAU,IAAI,IAAJ,CAAS,GAAnB,EAAwB,IAAI,IAAJ,CAAS,IAAjC,CAAZ;AACA,MAAI,MAAJ,CAAW,OAAX,EAAoB,KAApB;AACA,MAAI,QAAJ,CAAa,GAAb;AACD","file":"auth.service.js","sourcesContent":["'use strict';\r\n\r\nimport passport from 'passport';\r\nimport config from '../config/environment';\r\nimport jwt from 'jsonwebtoken';\r\nimport expressJwt from 'express-jwt';\r\nimport compose from 'composable-middleware';\r\nimport User from '../api/user/user.model';\r\n\r\nvar validateJwt = expressJwt({\r\n  secret: config.secrets.session\r\n});\r\n\r\n\r\n\r\n/**\r\n * Attaches the user object to the request if authenticated\r\n * Otherwise returns 403\r\n */\r\nexport function isAuthenticated() {\r\n  return compose()\r\n    // Validate jwt\r\n    .use(function(req, res, next) {\r\n      console.log('For Test: req.headers.authorization', JSON.stringify(req.headers.authorization));\r\n      // allow access_token to be passed through query parameter as well\r\n      if (req.query && req.query.hasOwnProperty('access_token')) {\r\n        req.headers.authorization = 'Bearer ' + req.query.access_token;\r\n      }\r\n      validateJwt(req, res, next);\r\n    })\r\n    // Attach user to request\r\n    .use(function(req, res, next) {\r\n      User.findById(req.user._id).exec()\r\n        .then(user => {\r\n          if (!user) {\r\n            return res.status(401).end();\r\n          }\r\n          req.user = user;\r\n          next();\r\n        })\r\n        .catch(err => next(err));\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nexport function checkValidation(){\r\n  if(!req.user.validation) return res.status(401).end();\r\n  next();\r\n}\r\n\r\n\r\n/**\r\n * Checks if the user role meets the minimum requirements of the route\r\n */\r\nexport function hasRole(roleRequired) {\r\n  if (!roleRequired) {\r\n    throw new Error('Required role needs to be set');\r\n  }\r\n\r\n  return compose()\r\n    .use(isAuthenticated())\r\n    .use(function meetsRequirements(req, res, next) {\r\n      if (config.userRoles.indexOf(req.user.role) >=\r\n          config.userRoles.indexOf(roleRequired)) {\r\n        next();\r\n      } else {\r\n        res.status(403).send('Forbidden');\r\n      }\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a jwt token signed by the app secret\r\n */\r\nexport function signToken(id, role) {\r\n  return jwt.sign({ _id: id, role: role }, config.secrets.session, {\r\n    expiresIn: 60 * 60 * 5\r\n  });\r\n}\r\n\r\n/**\r\n * Set token cookie directly for oAuth strategies\r\n */\r\nexport function setTokenCookie(req, res) {\r\n  if (!req.user) {\r\n    return res.status(404).send('It looks like you aren\\'t logged in, please try again.');\r\n  }\r\n  var token = signToken(req.user._id, req.user.role);\r\n  res.cookie('token', token);\r\n  res.redirect('/');\r\n}\r\n"]}