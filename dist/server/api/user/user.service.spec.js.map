{"version":3,"sources":["../../../../server/api/user/user.service.spec.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,QAAR,CAAb;IACI,IAAI,QAAQ,GAAR,CADR;IAEI,OAAO,aAAa,IAAb,EAFX;IAGI,OAAO,QAAQ,cAAR,CAHX;IAII,cAAc,aAAa,WAAb,EAJlB,C;;;;;;;;;;;;;;AAsBA,SAAS,gBAAT,EAA2B,YAAU;;AAEnC,aAAW,KAAK,MAAL,EAAX;AACA,QAAM,KAAK,MAAL,EAAN;;AAEA,WAAS,SAAT,EAAoB,YAAU;AAC5B,OAAG,iCAAH,EAAsC,UAAS,IAAT,EAAc;AAClD,kBAAY,MAAZ,CAAmB;AACjB,cAAM,WADW;AAEjB,eAAO,eAFU;AAGjB,kBAAU,MAHO;AAIjB,cAAM;AAJW,OAAnB,EAKG,IALH,CAKQ,UAAS,IAAT,EAAc;AACpB,aAAK,IAAL,CAAU,MAAV,CAAiB,EAAjB,CAAoB,GAApB,CAAwB,WAAxB;AACD,OAPD,EAOG,UAAS,KAAT,EAAe;AAChB,cAAM,MAAN,CAAa,EAAb,CAAgB,GAAhB,CAAoB,KAApB;AACD,OATD;AAUD,KAXD;;AAcA,OAAG,kCAAH,EAAuC,UAAU,IAAV,EAAgB;AACrD,kBAAY,MAAZ,CAAmB;AACjB,cAAM,WADW;AAEjB,eAAO,eAFU;AAGjB,kBAAU,MAHO;AAIjB,cAAM;AAJW,OAAnB,EAKG,IALH,CAKS,UAAS,IAAT,EAAc;AACrB,oBAAY,aAAZ,CAA0B,KAAK,UAA/B,EAA2C,IAA3C,CAAgD,UAAS,IAAT,EAAc;AAC5D,eAAK,UAAL,CAAgB,MAAhB,CAAuB,GAAvB,CAA2B,IAA3B;AACD,SAFD;AAID,OAVD;AAWD,KAZD;AAgBD,GA/BD;AAmCD,CAxCD","file":"user.service.spec.js","sourcesContent":["'use strict';\r\n\r\nvar should = require('should'),\r\n    Q = require('q'),\r\n    test = localrequire.test(),\r\n    User = require('./user.model'),\r\n    UserService = localrequire.UserService(); //('../user/user.service'),\r\n   // GroupService = require('./group.service'); \r\n\r\n/**\r\n * Test 항목\r\n *   exports.create = create;\r\n *   exports.index = index;\r\n *   exports.show = show;\r\n *   exports.update = update;\r\n *   exports.destroy = destroy;\r\n */\r\n\r\n\r\n//email validation\r\n\r\n\r\n\r\n\r\ndescribe('>>User Service', function(){\r\n\r\n  beforeEach(User.remove());\r\n  after(User.remove());\r\n\r\n  describe('create:', function(){\r\n    it('should be able to create a user', function(done){\r\n      UserService.create({\r\n        name: 'Test User',\r\n        email: 'test@test.com',\r\n        password: 'test',\r\n        role: 'user'\r\n      }).then(function(user){\r\n        user.name.should.be.eql('Test User');\r\n      }, function(error){\r\n        error.should.be.eql(empty);\r\n      });\r\n    });\r\n\r\n\r\n    it('should be able to create a group', function (done) {\r\n      UserService.create({\r\n        name: 'Test User',\r\n        email: 'test@test.com',\r\n        password: 'test',\r\n        role: 'user'\r\n      }).then( function(user){\r\n        UserService.emailValidate(user.usernumber).then(function(user){\r\n          user.validation.should.eql(true);\r\n        });\r\n\r\n      })\r\n    })\r\n\r\n\r\n\r\n  })\r\n\r\n\r\n\r\n})\r\n\r\n\r\n/*describe('>> Group Service', function() {\r\n\r\n  beforeEach(test.clear);\r\n  after(test.clear);\r\n\r\n  describe('create:', function() {\r\n    it('should be able to create a group', function (done) {\r\n      UserService.create({\r\n        name: 'Test User',\r\n        email: 'test@test.com',\r\n        password: 'test',\r\n        role: 'user'\r\n      })\r\n      .then(function(user) {\r\n        return Q.all([\r\n          user,\r\n          GroupService.create({\r\n            name: 'Test Group',\r\n            description: 'Test Group Description'\r\n          }, user)\r\n        ]);\r\n      })\r\n      .spread(function(user, group) {\r\n        return Q.all([\r\n          UserService.show(user.id),\r\n          group\r\n        ]);\r\n      })\r\n      .spread(function(user, group) {\r\n        should.exist(group);\r\n        group.id.should.be.an.instanceOf(String).and.not.be.empty;\r\n        group.created_at.should.be.an.instanceOf(Date);\r\n        group.owner.id.should.be.eql(user.id);\r\n        group.members.should.be.an.instanceOf(Array).and.have.lengthOf(1);\r\n        group.members[0].member.id.should.be.eql(user.id);\r\n        group.members[0].role.should.be.eql('OWNER');\r\n        group.should.be.containEql({\r\n          name: 'Test Group',\r\n          description: 'Test Group Description',\r\n          has_photo: false\r\n        });\r\n\r\n        user.groups.should.be.an.instanceOf(Array).and.have.lengthOf(1);\r\n        user.groups[0].id.should.be.eql(group.id);\r\n\r\n        done();\r\n      })\r\n      .catch(function(err) {\r\n        done(err);\r\n      });\r\n    });\r\n  }); // create\r\n\r\n  describe('list:', function() {\r\n    it('should get an empty array when there is no group', function(done) {\r\n      GroupService.index()\r\n      .then(function(groups) {\r\n        should.exist(groups);\r\n        groups.should.be.an.instanceOf(Array).and.have.lengthOf(0);\r\n\r\n        done();\r\n      })\r\n      .catch(function(err) {\r\n        done(err);\r\n      });\r\n    });\r\n\r\n    it('should be able to list groups', function(done) {\r\n      UserService.create({\r\n        name: 'Test User',\r\n        email: 'test@test.com',\r\n        password: 'test',\r\n        role: 'user'\r\n      })\r\n      .then(function(user) {\r\n        return Q.all([\r\n          user,\r\n          GroupService.create({\r\n            name: 'Test Group',\r\n            description: 'Test Group Description'\r\n          }, user)\r\n          .then(function() {\r\n            return GroupService.create({\r\n              name: 'Test Group 2',\r\n              description: 'Test Group Description 2'\r\n            }, user);\r\n          })\r\n          .then(function() {\r\n            return GroupService.index();\r\n          })\r\n        ]);\r\n      })\r\n      .spread(function(user, groups) {\r\n        should.exist(groups);\r\n        groups.should.be.an.instanceOf(Array).and.have.lengthOf(2);\r\n\r\n        groups[0].id.should.be.an.instanceOf(String).and.not.be.empty;\r\n        groups[0].created_at.should.be.an.instanceOf(Date);\r\n        groups[0].owner.id.should.be.eql(user.id);\r\n        groups[0].members.should.be.an.instanceOf(Array).and.have.lengthOf(1);\r\n        groups[0].members[0].member.toString().should.be.eql(user.id);\r\n        groups[0].members[0].role.should.be.eql('OWNER');\r\n        groups[0].should.be.containEql({\r\n          name: 'Test Group',\r\n          description: 'Test Group Description',\r\n          has_photo: false\r\n        });\r\n        \r\n        groups[1].id.should.be.an.instanceOf(String).and.not.be.empty;\r\n        groups[1].created_at.should.be.an.instanceOf(Date);\r\n        groups[1].owner.id.should.be.eql(user.id);\r\n        groups[1].members.should.be.an.instanceOf(Array).and.have.lengthOf(1);\r\n        groups[1].members[0].member.toString().should.be.eql(user.id);\r\n        groups[1].members[0].role.should.be.eql('OWNER');\r\n        groups[1].should.be.containEql({\r\n          name: 'Test Group 2',\r\n          description: 'Test Group Description 2',\r\n          has_photo: false\r\n        });\r\n\r\n        done();\r\n      })\r\n      .catch(function(err) {\r\n        done(err);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('read:', function() {\r\n    it('should be able to read a group', function(done) {\r\n      UserService.create({\r\n        name: 'Test User',\r\n        email: 'test@test.com',\r\n        password: 'test',\r\n        role: 'user'\r\n      })\r\n      .then(function(user) {\r\n        return Q.all([\r\n          user,\r\n          GroupService.create({\r\n            name: 'Test Group',\r\n            description: 'Test Group Description'\r\n          }, user)\r\n          .then(function(group) {\r\n            return GroupService.show(group.id);\r\n          })\r\n        ]);\r\n      })\r\n      .spread(function(user, group) {\r\n        should.exist(group);\r\n        group.id.should.be.an.instanceOf(String).and.not.be.empty;\r\n        group.created_at.should.be.an.instanceOf(Date);\r\n        group.owner.toString().should.be.eql(user.id);\r\n        group.members.should.be.an.instanceOf(Array).and.have.lengthOf(1);\r\n        group.members[0].member.toString().should.be.eql(user.id);\r\n        group.members[0].role.should.be.eql('OWNER');\r\n        group.should.be.containEql({\r\n          name: 'Test Group',\r\n          description: 'Test Group Description',\r\n          has_photo: false\r\n        });\r\n\r\n        done();\r\n      })\r\n      .catch(function(err) {\r\n        done(err);\r\n      });\r\n    });\r\n\r\n    it('should not be able to read a non-existing group', function(done) {\r\n      GroupService.show('000000000000000000000000')\r\n      .fail(function(err) {\r\n        should.exist(err);\r\n        should.exist(err.message);\r\n        err.code.should.be.eql('GROUP_NOT_FOUND');\r\n\r\n        done();\r\n      })\r\n      .catch(function(err) {\r\n        done(err);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('update:', function() {\r\n    it('should be able to update a group', function(done) {\r\n      UserService.create({\r\n        name: 'Test User',\r\n        email: 'test@test.com',\r\n        password: 'test',\r\n        role: 'user'\r\n      })\r\n      .then(function(user) {\r\n        return GroupService.create({\r\n          name: 'Test Group',\r\n          description: 'Test Group Description'\r\n        }, user);\r\n      })\r\n      .then(function(group) {\r\n        return GroupService.update(group.id, {\r\n          name: 'New Test Group',\r\n          description: 'New Test Group Description'\r\n        });\r\n      })\r\n      .then(function(group) {\r\n        should.exist(group);\r\n        group.should.be.containEql({\r\n          name: 'New Test Group',\r\n          description: 'New Test Group Description',\r\n          has_photo: false\r\n        });\r\n\r\n        done();\r\n      })\r\n      .catch(function(err) {\r\n        done(err);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('delete:', function() {\r\n    it('should be able to delete a group', function(done) {\r\n      UserService.create({\r\n        name: 'Test User',\r\n        email: 'test@test.com',\r\n        password: 'test',\r\n        role: 'user'\r\n      })\r\n      .then(function(user) {\r\n        return GroupService.create({\r\n          name: 'Test Group',\r\n          description: 'Test Group Description'\r\n        }, user);\r\n      })\r\n      .then(function(group) {\r\n        return Q.all([group.id, GroupService.destroy(group.id)]);\r\n      })\r\n      .spread(function(groupId, status) {\r\n        status.should.be.eql(204);\r\n        return GroupService.show(groupId);\r\n      })\r\n      .fail(function(err) {\r\n        should.exist(err);\r\n        should.exist(err.message);\r\n        err.code.should.be.eql('GROUP_NOT_FOUND');\r\n\r\n        done();\r\n      })\r\n      .catch(function(err) {\r\n        done(err);\r\n      });\r\n    });\r\n  });\r\n});\r\n*/\r\n"]}