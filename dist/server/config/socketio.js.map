{"version":3,"sources":["../../../server/config/socketio.js"],"names":[],"mappings":";;;AAGA;;;;;;;;;;kBAuBe,UAAS,QAAT,EAAmB;;;;;;;;;;;;;;;;AAgBhC,WAAS,EAAT,CAAY,YAAZ,EAA0B,UAAS,MAAT,EAAiB;AACzC,WAAO,OAAP,GAAiB,OAAO,OAAP,CAAe,UAAf,CAA0B,aAA1B,GACf,GADe,GACT,OAAO,OAAP,CAAe,UAAf,CAA0B,UADlC;;AAGA,WAAO,WAAP,GAAqB,IAAI,IAAJ,EAArB;;AAEA,WAAO,GAAP,GAAa,YAAkB;AAAA;;AAAA,wCAAN,IAAM;AAAN,YAAM;AAAA;;AAC7B,2BAAQ,GAAR,gCAAwB,OAAO,GAAP,CAAW,IAAnC,UAA4C,OAAO,OAAnD,eAAkE,IAAlE;AACD,KAFD;;;AAKA,WAAO,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5B,mBAAa,MAAb;AACA,aAAO,GAAP,CAAW,cAAX;AACD,KAHD;;;AAMA,cAAU,MAAV;AACA,WAAO,GAAP,CAAW,WAAX;AACD,GAnBD;AAoBD,C;;AAzDD;;;;;;;AAGA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,CAC7B;;;AAGD,SAAS,SAAT,CAAmB,MAAnB,EAA2B;;AAEzB,SAAO,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACxB,WAAO,GAAP,CAAW,yBAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACD,GAFD;;;AAKA,UAAQ,2BAAR,EAAqC,QAArC,CAA8C,MAA9C;AACA,UAAQ,+BAAR,EAAyC,QAAzC,CAAkD,MAAlD;AACA,UAAQ,yBAAR,EAAmC,QAAnC,CAA4C,MAA5C;AACA,UAAQ,2BAAR,EAAqC,QAArC,CAA8C,MAA9C;AAED","file":"socketio.js","sourcesContent":["/**\r\n * Socket.io configuration\r\n */\r\n'use strict';\r\n\r\nimport config from './environment';\r\n\r\n// When the user disconnects.. perform this\r\nfunction onDisconnect(socket) {\r\n}\r\n\r\n// When the user connects.. perform this\r\nfunction onConnect(socket) {\r\n  // When the client emits 'info', this listens and executes\r\n  socket.on('info', data => {\r\n    socket.log(JSON.stringify(data, null, 2));\r\n  });\r\n\r\n  // Insert sockets below\r\n  require('../api/human/human.socket').register(socket);\r\n  require('../api/comment/comment.socket').register(socket);\r\n  require('../api/card/card.socket').register(socket);\r\n  require('../api/thing/thing.socket').register(socket);\r\n\r\n}\r\n\r\nexport default function(socketio) {\r\n  // socket.io (v1.x.x) is powered by debug.\r\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\r\n  //\r\n  // ex: DEBUG: \"http*,socket.io:socket\"\r\n\r\n  // We can authenticate socket.io users and access their token through socket.decoded_token\r\n  //\r\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\r\n  //\r\n  // 2. Require authentication here:\r\n  // socketio.use(require('socketio-jwt').authorize({\r\n  //   secret: config.secrets.session,\r\n  //   handshake: true\r\n  // }));\r\n\r\n  socketio.on('connection', function(socket) {\r\n    socket.address = socket.request.connection.remoteAddress +\r\n      ':' + socket.request.connection.remotePort;\r\n\r\n    socket.connectedAt = new Date();\r\n\r\n    socket.log = function(...data) {\r\n      console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\r\n    };\r\n\r\n    // Call onDisconnect.\r\n    socket.on('disconnect', () => {\r\n      onDisconnect(socket);\r\n      socket.log('DISCONNECTED');\r\n    });\r\n\r\n    // Call onConnect.\r\n    onConnect(socket);\r\n    socket.log('CONNECTED');\r\n  });\r\n}\r\n"]}