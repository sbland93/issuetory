{"version":3,"sources":["../../../../server/api/comment/comment.integration.js"],"names":[],"mappings":"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","file":"comment.integration.js","sourcesContent":["'use strict';\r\n\r\nvar app = require('../..');\r\nimport request from 'supertest';\r\n\r\nvar newComment;\r\n\r\ndescribe('Comment API:', function() {\r\n\r\n  describe('GET /api/comments', function() {\r\n    var comments;\r\n\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .get('/api/comments')\r\n        .expect(200)\r\n        .expect('Content-Type', /json/)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          comments = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should respond with JSON array', function() {\r\n      comments.should.be.instanceOf(Array);\r\n    });\r\n\r\n  });\r\n\r\n  describe('POST /api/comments', function() {\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .post('/api/comments')\r\n        .send({\r\n          name: 'New Comment',\r\n          info: 'This is the brand new comment!!!'\r\n        })\r\n        .expect(201)\r\n        .expect('Content-Type', /json/)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          newComment = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should respond with the newly created comment', function() {\r\n      newComment.name.should.equal('New Comment');\r\n      newComment.info.should.equal('This is the brand new comment!!!');\r\n    });\r\n\r\n  });\r\n\r\n  describe('GET /api/comments/:id', function() {\r\n    var comment;\r\n\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .get('/api/comments/' + newComment._id)\r\n        .expect(200)\r\n        .expect('Content-Type', /json/)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          comment = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    afterEach(function() {\r\n      comment = {};\r\n    });\r\n\r\n    it('should respond with the requested comment', function() {\r\n      comment.name.should.equal('New Comment');\r\n      comment.info.should.equal('This is the brand new comment!!!');\r\n    });\r\n\r\n  });\r\n\r\n  describe('PUT /api/comments/:id', function() {\r\n    var updatedComment;\r\n\r\n    beforeEach(function(done) {\r\n      request(app)\r\n        .put('/api/comments/' + newComment._id)\r\n        .send({\r\n          name: 'Updated Comment',\r\n          info: 'This is the updated comment!!!'\r\n        })\r\n        .expect(200)\r\n        .expect('Content-Type', /json/)\r\n        .end(function(err, res) {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          updatedComment = res.body;\r\n          done();\r\n        });\r\n    });\r\n\r\n    afterEach(function() {\r\n      updatedComment = {};\r\n    });\r\n\r\n    it('should respond with the updated comment', function() {\r\n      updatedComment.name.should.equal('Updated Comment');\r\n      updatedComment.info.should.equal('This is the updated comment!!!');\r\n    });\r\n\r\n  });\r\n\r\n  describe('DELETE /api/comments/:id', function() {\r\n\r\n    it('should respond with 204 on successful removal', function(done) {\r\n      request(app)\r\n        .delete('/api/comments/' + newComment._id)\r\n        .expect(204)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          done();\r\n        });\r\n    });\r\n\r\n    it('should respond with 404 when comment does not exist', function(done) {\r\n      request(app)\r\n        .delete('/api/comments/' + newComment._id)\r\n        .expect(404)\r\n        .end((err, res) => {\r\n          if (err) {\r\n            return done(err);\r\n          }\r\n          done();\r\n        });\r\n    });\r\n\r\n  });\r\n\r\n});\r\n"]}